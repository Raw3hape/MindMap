//
//  ContentView.swift
//  MindMap - –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –≤–µ—Ä—Å–∏—è
//
//  Created by Nikita Sergyshkin on 05/08/2025.
//

import SwiftUI
import CoreData

struct ContentView: View {
    @StateObject private var themeManager = ThemeManager.shared
    @State private var selectedTab = 0
    
    var body: some View {
        ZStack {
            // –§–æ–Ω
            Color.minimalBackground
                .ignoresSafeArea()
            
            TabView(selection: $selectedTab) {
                // –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –∑–∞–¥–∞—á–∞–º–∏
                TaskListView()
                    .tabItem {
                        Image(systemName: selectedTab == 0 ? "list.bullet" : "list.bullet")
                        Text("–ó–∞–¥–∞—á–∏")
                    }
                    .tag(0)
                
                // –≠–∫—Ä–∞–Ω –∑–∞–ø–∏—Å–∏
                MinimalRecordingView()
                    .tabItem {
                        Image(systemName: selectedTab == 1 ? "plus.circle.fill" : "plus.circle")
                        Text("–°–æ–∑–¥–∞—Ç—å")
                    }
                    .tag(1)
                
                // –≠–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫
                MinimalSettingsView()
                    .tabItem {
                        Image(systemName: selectedTab == 2 ? "gearshape.fill" : "gearshape")
                        Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
                    }
                    .tag(2)
            }
            .accentColor(.minimalAccent)
            .preferredColorScheme(getColorScheme())
            .environmentObject(themeManager)
            .onAppear {
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ —Ç–∞–±-–±–∞—Ä–∞
                configureTabBar()
                logInfo("üè† ContentView –ø–æ—è–≤–∏–ª—Å—è, —Ç–µ–∫—É—â–∞—è —Ç–µ–º–∞: \(themeManager.currentTheme.displayName)", category: .ui)
            }
            .onChange(of: themeManager.currentTheme) { _, newTheme in
                configureTabBar()
                logInfo("üîÑ ContentView: —Ç–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ \(newTheme.displayName)", category: .ui)
            }
        }
    }
    
    private func getColorScheme() -> ColorScheme? {
        switch themeManager.currentTheme {
        case .light:
            return .light
        case .dark:
            return .dark
        case .system:
            return nil // –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–º—É
        }
    }
    
    private func configureTabBar() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ —Ç–∞–±-–±–∞—Ä–∞ –¥–ª—è –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
        let appearance = UITabBarAppearance()
        appearance.configureWithOpaqueBackground()
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ç–µ–º—É –∏–∑ ThemeManager, –∞ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω—É—é
        let isDarkTheme = themeManager.isDarkMode
        
        if isDarkTheme {
            // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
            appearance.backgroundColor = UIColor(MinimalColors.Dark.surface)
            appearance.shadowColor = UIColor(MinimalColors.Dark.border)
            
            // –¶–≤–µ—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ
            appearance.stackedLayoutAppearance.normal.iconColor = UIColor(MinimalColors.Dark.textSecondary)
            appearance.stackedLayoutAppearance.normal.titleTextAttributes = [
                .foregroundColor: UIColor(MinimalColors.Dark.textSecondary)
            ]
            appearance.stackedLayoutAppearance.selected.iconColor = UIColor(MinimalColors.Dark.accent)
            appearance.stackedLayoutAppearance.selected.titleTextAttributes = [
                .foregroundColor: UIColor(MinimalColors.Dark.accent)
            ]
        } else {
            // –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
            appearance.backgroundColor = UIColor(MinimalColors.surface)
            appearance.shadowColor = UIColor(MinimalColors.border)
            
            // –¶–≤–µ—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ
            appearance.stackedLayoutAppearance.normal.iconColor = UIColor(MinimalColors.textSecondary)
            appearance.stackedLayoutAppearance.normal.titleTextAttributes = [
                .foregroundColor: UIColor(MinimalColors.textSecondary)
            ]
            appearance.stackedLayoutAppearance.selected.iconColor = UIColor(MinimalColors.accent)
            appearance.stackedLayoutAppearance.selected.titleTextAttributes = [
                .foregroundColor: UIColor(MinimalColors.accent)
            ]
        }
        
        UITabBar.appearance().standardAppearance = appearance
        UITabBar.appearance().scrollEdgeAppearance = appearance
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ TabBar
        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene {
            for window in windowScene.windows {
                for view in window.subviews {
                    view.removeFromSuperview()
                    window.addSubview(view)
                }
            }
        }
    }
}

// –°—Ç–∞—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≤–µ—Ä—Å–∏–∏

#Preview {
    ContentView()
        .environment(\.managedObjectContext, CoreDataManager.shared.context)
}

#Preview("Dark Mode") {
    ContentView()
        .preferredColorScheme(.dark)
        .environment(\.managedObjectContext, CoreDataManager.shared.context)
}