// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ process-text API
// –ê—É–¥–∏–æ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è iOS Speech Recognition

export default async function handler(req, res) {
  console.log('üîÑ process-audio: –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ process-text API');
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,PATCH,DELETE,POST,PUT');
  res.setHeader(
    'Access-Control-Allow-Headers',
    'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version'
  );

  if (req.method === 'OPTIONS') {
    console.log('‚úÖ OPTIONS –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
    res.status(200).end();
    return;
  }

  if (req.method !== 'POST') {
    console.log('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥:', req.method);
    return res.status(405).json({ 
      success: false, 
      error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST.' 
    });
  }

  try {
    const { text } = req.body;

    if (!text || text.trim().length === 0) {
      console.log('‚ùå –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤ –∑–∞–ø—Ä–æ—Å–µ');
      return res.status(400).json({ 
        success: false, 
        error: '–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ iOS Speech Recognition –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∞—É–¥–∏–æ.' 
      });
    }

    console.log('üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', text.substring(0, 50) + '...');

    // –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–ø—Ä–æ—Å –∫ process-text
    const textApiUrl = `${req.headers['x-forwarded-proto'] || 'https'}://${req.headers.host}/api/process-text`;
    
    console.log('üåê –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –Ω–∞:', textApiUrl);

    const response = await fetch(textApiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ text })
    });

    const result = await response.json();
    
    console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç process-text –ø–æ–ª—É—á–µ–Ω:', response.status);
    
    return res.status(response.status).json(result);

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞:', error);
    
    return res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ text API: ' + error.message
    });
  }
}