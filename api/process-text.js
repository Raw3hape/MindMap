import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export default async function handler(req, res) {
  console.log('üìù –ù–∞—á–∞–ª—Å—è –∑–∞–ø—Ä–æ—Å –∫ process-text API (OPTIMIZED)');
  console.log('üìã –ú–µ—Ç–æ–¥:', req.method);
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,PATCH,DELETE,POST,PUT');
  res.setHeader(
    'Access-Control-Allow-Headers',
    'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version'
  );

  if (req.method === 'OPTIONS') {
    console.log('‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ OPTIONS –∑–∞–ø—Ä–æ—Å');
    res.status(200).end();
    return;
  }

  if (req.method !== 'POST') {
    console.log('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥:', req.method);
    return res.status(405).json({ success: false, error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
  }

  try {
    console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
      hasText: !!req.body?.text,
      textLength: req.body?.text?.length || 0,
      bodyKeys: Object.keys(req.body || {})
    });
    
    const { text } = req.body;

    if (!text || text.trim().length === 0) {
      console.log('‚ùå –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç');
      return res.status(400).json({ 
        success: false, 
        error: '–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' 
      });
    }

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT-4o-mini
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.

–¢–µ–∫—Å—Ç: "${text}"

–°–æ–∑–¥–∞–π JSON —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:
- title: –∫—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–º–∞–∫—Å 50 —Å–∏–º–≤–æ–ª–æ–≤)
- description: –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
- priority: "–Ω–∏–∑–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π" –∏–ª–∏ "–≤—ã—Å–æ–∫–∏–π"
- subtasks: –º–∞—Å—Å–∏–≤ –ø–æ–¥–∑–∞–¥–∞—á (–º–∞–∫—Å 5)
- originalText: –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç

–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:
- "–≤—ã—Å–æ–∫–∏–π": —Å—Ä–æ—á–Ω–æ, –≤–∞–∂–Ω–æ, deadline, –∫—Ä–∏—Ç–∏—á–Ω–æ, –¥–æ [–¥–∞—Ç–∞]
- "–Ω–∏–∑–∫–∏–π": –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
- "—Å—Ä–µ–¥–Ω–∏–π": –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏

–ü—Ä–∏–º–µ—Ä—ã:
- "–∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∏ —Ö–ª–µ–±" ‚Üí title: "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã", subtasks: ["–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ", "–ö—É–ø–∏—Ç—å —Ö–ª–µ–±"], priority: "–Ω–∏–∑–∫–∏–π"
- "–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫—É" ‚Üí title: "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", priority: "–≤—ã—Å–æ–∫–∏–π"`;

    console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ GPT-4o-mini –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...', text.substring(0, 50) + '...');
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini', // –ù–æ–≤–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å
      messages: [
        {
          role: 'system',
          content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–≤–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      max_tokens: 400, // –£–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
      temperature: 0.2,
      response_format: { type: 'json_object' } // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON
    });

    const responseText = completion.choices[0].message.content.trim();
    console.log('üìù –û—Ç–≤–µ—Ç –æ—Ç GPT-4o-mini:', responseText);
    
    try {
      const taskData = JSON.parse(responseText);
      console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:', taskData);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      const processedTask = {
        title: taskData.title || text.substring(0, 50),
        description: taskData.description || null,
        priority: mapPriority(taskData.priority),
        subtasks: Array.isArray(taskData.subtasks) ? taskData.subtasks.slice(0, 5) : [],
        originalText: text
      };

      console.log('üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:', processedTask.title);
      return res.status(200).json({
        success: true,
        data: processedTask
      });

    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
      console.error('üìù –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI:', responseText);
      
      // Fallback: —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–¥–∞—á—É
      const fallbackTask = {
        title: text.substring(0, 50),
        description: text.length > 50 ? text : null,
        priority: '—Å—Ä–µ–¥–Ω–∏–π',
        subtasks: [],
        originalText: text
      };

      return res.status(200).json({
        success: true,
        data: fallbackTask
      });
    }

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ process-text:', error);
    console.error('üîç –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    
    return res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message
    });
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
function mapPriority(priority) {
  if (!priority) return '—Å—Ä–µ–¥–Ω–∏–π';
  
  const lowPriority = ['–Ω–∏–∑–∫–∏–π', 'low', 'normal', '–æ–±—ã—á–Ω—ã–π'];
  const highPriority = ['–≤—ã—Å–æ–∫–∏–π', 'high', 'urgent', '—Å—Ä–æ—á–Ω—ã–π', '–≤–∞–∂–Ω—ã–π', '–∫—Ä–∏—Ç–∏—á–Ω–æ'];
  
  const priorityLower = priority.toLowerCase();
  
  if (lowPriority.some(p => priorityLower.includes(p))) {
    return '–Ω–∏–∑–∫–∏–π';
  }
  
  if (highPriority.some(p => priorityLower.includes(p))) {
    return '–≤—ã—Å–æ–∫–∏–π';
  }
  
  return '—Å—Ä–µ–¥–Ω–∏–π';
}